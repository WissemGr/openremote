# Cloud-optimized Docker Compose
version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: openremote
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/openremote
      KC_DB_USERNAME: ${POSTGRES_USER:-postgres}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT_HTTPS: "false"
    command: start --optimized
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    ports:
      - "8080:8080"

  # OpenRemote Manager
  manager:
    build:
      context: .
      dockerfile: manager/Dockerfile
    environment:
      OR_HOSTNAME: ${OR_HOSTNAME:-localhost}
      OR_SSL_PORT: ${OR_SSL_PORT:-443}
      OR_DEV_MODE: "false"
      SETUP_ADMIN_PASSWORD: ${SETUP_ADMIN_PASSWORD:-secret}
      SETUP_WIPE_CLEAN_INSTALL: "true"
      DATABASE_URL: jdbc:postgresql://postgresql:5432/openremote
      DATABASE_USERNAME: ${POSTGRES_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      IDENTITY_PROVIDER_URL: http://keycloak:8080/auth
    depends_on:
      postgresql:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/master/info"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    ports:
      - "80:8080"
      - "443:8443"

volumes:
  postgresql-data:
